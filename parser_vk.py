# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from vkbottle import API
from settings import *
from private_data import TOKEN_VK
import datetime

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø–æ id —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ —Ö—ç—à—Ç—ç–≥—É
async def get_wall(owner_id, hashtag):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–∫
    api = API(TOKEN_VK)
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–µ–Ω—É –≤–∫
    wall = await api.wall.get(owner_id=owner_id)
    # –†–µ–∑—É–ª—å—Ç–∞—Ç = []
    result = []
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç–µ–Ω—É
    for i in wall.items[:5]:
        # –ï—Å–ª–∏ –≤ –ø–æ—Å—Ç–µ –µ—Å—Ç—å –Ω–∞—à —Ö—ç—à—Ç–µ–≥, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if hashtag in str(i.text):
            date = i.date
            date = datetime.datetime.fromtimestamp(date)
            date = date.strftime('%Y-%m-%d %H:%M:%S')

            result.append(f"‚ö†Ô∏è–ù–æ–≤—ã–π –ø–æ—Å—Ç‚ö†Ô∏è\nüìÜ–î–∞—Ç–∞: {date} \nüóìÔ∏è–¢–µ–∫—Å—Ç: \n{i.text}")
        
    # –í–æ–∑–≤—Ä–∞—â–∞—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return result


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∏ –Ω–æ–≤—ã—Ö
async def get_notification(hashtag, link, old_posts):
    screen_name = str(link)[15:]
    owner_id = await get_id(screen_name)
    all_posts = await get_wall(owner_id, hashtag)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
    new_posts = []
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    for post in all_posts:
        # –ï—Å–ª–∏ –ø–æ—Å—Ç–∞ –Ω–µ—Ç –≤ –±–¥
        if post not in eval(old_posts):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
            new_posts.append(post)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏ –Ω–æ–≤—ã–µ
    return all_posts, new_posts


async def get_id(screen_name):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–∫
    api = API(TOKEN_VK)
    info = await api.utils.resolve_screen_name(screen_name)

    if info.type.value: return -abs(info.object_id)
    else: return info.object_id