# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from PostgreSQLighter import SQLighter

from settings import *
from private_data import TOKEN_TG, admin_password

from commands.admin.add_event import addEventState
from commands.admin.edit_event import editEventState

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
from commands.start import start
from commands.menu import menu
from commands.help import help
from commands.callback_subscribe import callback_subscribe
from commands.callback_info import callback_info
from commands.callback import callback
from commands.notification import notification
from commands.admin.give_adm import give_adm
from commands.admin.add_event import add_event_start, add_event_name, add_event_link, add_event_hashtag, add_event_description
from commands.admin.cancel import cancel
from commands.admin.delete_event import delete_event_kb, callback_delete
from commands.admin.edit_event import edit_event_kb, edit_event_description,edit_event_hashtag,edit_event_link,edit_event_name, edit_event_start
from commands.admin.adm_panel import adm_menu, adm_statistics


scheduler = AsyncIOScheduler()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN_TG)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
db = SQLighter('it_fest.db')

# ```````````````````–ë–ê–ó–ê```````````````````````````````````````

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'], commands_prefix='/')
async def process_start_command(message: types.Message):
    await start(message)


# –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é
@dp.message_handler(commands=['menu', '–º–µ–Ω—é'], commands_prefix='/')
async def process_menu_command(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await menu(message)


# –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data and c.data =='admin_menu')
@dp.message_handler(commands=['admmenu', '–∞–¥–º–º–µ–Ω—é', 'admpanel'], commands_prefix='/')
async def process_menu_command(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await adm_menu(message)


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â—å
@dp.message_handler(commands=['help', '–ø–æ–º–æ—â—å'], commands_prefix='/')
async def process_help_command(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await help(message)


# `````````````````````````````````````````````````–ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´````````````````````````````````````````````````````````````````````````````````

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏
@dp.message_handler(commands=admin_password, commands_prefix='/')
async def process_help_command(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await give_adm(message)


@dp.message_handler(commands=['adm_statistics', 'admstatistics', '—Å—Ç–∞—Ç–∞', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stata'])
@dp.callback_query_handler(lambda c: c.data and c.data =='adm_statistics')
async def statistics(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await adm_statistics(message)

# –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞
@dp.callback_query_handler(lambda c: c.data and c.data =='delete')
@dp.message_handler(commands=['delete', '—É–¥–∞–ª–∏—Ç—å'])
async def process_help_command(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await delete_event_kb(message)


# –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞
@dp.callback_query_handler(lambda c: c.data and c.data =='edit')
@dp.message_handler(commands=['edit', '–∏–∑–º–µ–Ω–∏—Ç—å'])
async def process_help_command(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await edit_event_kb(message)


# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
@dp.message_handler(commands=['cancel', '–æ—Ç–º–µ–Ω–∞'],state='*')
async def process_help_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await cancel(message, state)


# ````````````````````–°–¢–ï–ô–¢–´ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ò–í–ï–ù–¢–û–í```````````````````````````````````````

# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞
@dp.callback_query_handler(lambda c: c.data and c.data =='add_event')
@dp.message_handler(commands=['add', 'addevent', '–¥–æ–±–∞–≤–∏—Ç—å'])
async def process_add_event_start(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await add_event_start(message)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–≤–µ–Ω—Ç–∞
@dp.message_handler(state=addEventState.name)
async def process_help_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await add_event_name(message, state)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ–≥–æ –∏–≤–µ–Ω—Ç–∞
@dp.message_handler(state=addEventState.link)
async def process_help_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await add_event_link(message, state)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞ –Ω–æ–≤–æ–≥–æ –∏–≤–µ–Ω—Ç–∞
@dp.message_handler(state=addEventState.hashtag)
async def process_help_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await add_event_hashtag(message, state)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–≤–µ–Ω—Ç–∞
@dp.message_handler(state=addEventState.description)
async def process_help_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await add_event_description(message, state)


# ````````````````````–°–¢–ï–ô–¢–´ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ò–í–ï–ù–¢–û–í```````````````````````````````````````


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –∏–≤–µ–Ω—Ç–∞
@dp.message_handler(state=editEventState.name)
async def process_help_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await edit_event_name(message, state)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –∏–≤–µ–Ω—Ç–∞
@dp.message_handler(state=editEventState.link)
async def process_help_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await edit_event_link(message, state)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –∏–≤–µ–Ω—Ç–∞
@dp.message_handler(state=editEventState.hashtag)
async def process_help_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await edit_event_hashtag(message, state)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –∏–≤–µ–Ω—Ç–∞
@dp.message_handler(state=editEventState.description)
async def process_help_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await message.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await edit_event_description(message, state)





# ````````````````````–ö–û–õ–õ–ë–≠–ö–ò```````````````````````````````````````


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –∫–æ–≥–¥–∞ —É –∏–≤–µ–Ω—Ç–∞ –Ω–µ—Ç —Ö—ç—à—Ç–µ–≥–∞
@dp.callback_query_handler(lambda c: c.data and c.data == 'add_non_hashtag', state=addEventState.hashtag)
async def process_callback_add_non_hashtag(callback_query: types.CallbackQuery, state = FSMContext):
    user_id = callback_query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await callback_query.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —é–∑–µ—Ä –∞–¥–º–∏–Ω–æ–º
    if db.get_any(user_id, 'is_admin') == 0:
        await callback_query.answer('‚õî–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!‚õî \n –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–º —Å—Ç–∞—Ç—å, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @Momfj')
        return
    
    await state.update_data(hashtag='')
    await addEventState.next()
    await bot.send_message(user_id, "üò≤–ù–µ—Ç —Ö—ç—à—Ç–µ–≥–∞? –ù—É –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –Ø –±—É–¥—É —Ä–∞—Å—Å—ã–ª–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞–±–ª–∏–∫–∞. –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –∫–æ–≥–¥–∞ —É –∏–≤–µ–Ω—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ —Å—Ç–∞—Ä–æ–µ
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('edit_keep_'), state='*')
async def process_callback_add_non_hashtag(callback_query: types.CallbackQuery, state = FSMContext):
    user_id = callback_query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await callback_query.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —é–∑–µ—Ä –∞–¥–º–∏–Ω–æ–º
    if db.get_any(user_id, 'is_admin') == 0:
        await callback_query.answer('‚õî–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!‚õî \n –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–º —Å—Ç–∞—Ç—å, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @Momfj')
        return
    
    # –æ–±—ä–µ–∫—Ç —Ä–∞–≤–µ–Ω ...
    obj = callback_query.data[10:]
    if obj == 'name':
        await state.update_data(name='keep_old') # –ó–∞–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await editEventState.next() # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
        await bot.send_message(user_id, "üëç–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–ª—è—é —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤–∫", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏—é —Å—Å—ã–ª–∫—É', callback_data=f'edit_keep_link')))
    elif obj == 'link':
        await state.update_data(link='keep_old')
        await editEventState.next()
        await bot.send_message(user_id, 'üëç–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–ª—è—é —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ö—ç—à—Ç–µ–≥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–ø–∏—à–∏ "–Ω–µ—Ç"', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏–π —Ö—ç—à—Ç–µ–≥', callback_data=f'edit_keep_hashtag')))
    elif obj == 'hashtag':
        await state.update_data(hashtag='keep_old')
        await editEventState.next()
        await bot.send_message(user_id, 'üëç–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–ª—è—é —Å—Ç–∞—Ä—ã–π —Ö—ç—à—Ç–µ–≥. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'edit_keep_description')))
    
    elif obj == 'description':
        await state.update_data(description='keep_old')
        user_data = await state.get_data()
        old_name = user_data['old_name'] # –°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

        if user_data['link'] == 'keep_old': group_id = db.get_any_from_events('group_id',old_name) # –ï—Å–ª–∏ –Ω–∞–¥–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É
        else: group_id = user_data['link'] # –ï—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É

        if user_data['name'] == 'keep_old': name = db.get_any_from_events('name',old_name)
        else: name = user_data['name']
        
        if user_data['hashtag'] == 'keep_old': hashtag = db.get_any_from_events('hashtag',old_name)
        else: hashtag = user_data['hashtag']
        
        if user_data['description'] == 'keep_old': description = db.get_any_from_events('description',old_name)
        else: description = user_data['description']

        # –ò–∑–º–µ–Ω—è–µ–º –∏–≤–µ–Ω—Ç
        db.edit_any_from_events('group_id', old_name, group_id)
        db.edit_any_from_events('hashtag', old_name, hashtag)
        db.edit_any_from_events('description', old_name, description)
        db.edit_any_from_events('name', old_name, name)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton(f'{name}', callback_data=f'info_{name}'))

        await bot.send_message(user_id, "‚úÖ–¢–≤–æ–π –∏–≤–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=keyboard)
        await state.finish() # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º


    
    


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—ç–ª–±–µ–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('subscribe_'))
async def process_callback_subscribe(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await callback_query.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await callback_subscribe(callback_query)
    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—ç–ª–±—ç–∫ –∫–Ω–æ–ø–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('info_'))
async def process_callback_info(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await callback_query.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await callback_info(callback_query)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delete_'))
async def process_callback_delete(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await callback_query.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await callback_delete(callback_query)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('edit_'))
async def process_callback_delete(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await callback_query.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await edit_event_start(callback_query, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@dp.message_handler(Text(equals=["‚Ñπ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", '‚úî–ü–æ–¥–ø–∏—Å–∫–∏', 'üîì–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è']))
@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery=None):
    user_id = callback_query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–¥
    try:
        db.get_any(user_id, 'id')
    except TypeError:
        await callback_query.answer('üò¨–¢–∞–∫.. –°–º–æ—Ç—Ä—é —Ç–µ–±—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ /start –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª)')
        return
    
    await callback(callback_query)




# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def on_startup(dp):
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –º–µ–Ω—è))
    print('')
    print('-------------------------------')
    print('  –°–∫—Ä–∏–ø—Ç –±–æ—Ç–∞ —Ç–≥ –¥–ª—è –∏—Ç—Ñ–µ—Å—Ç–∞ –∑–∞–ø—É—â–µ–Ω.')
    print('  –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ö–∏—Ä–∏–ª–ª –ê—Ä–∑–∞–º–∞—Å—Ü–µ–≤ ')
    print('  GitHub: https://github.com/nickname123456')
    print('  –í–∫: https://vk.com/kirillarz')
    print('  –î—Å: CoalNavl#0043')
    print('-------------------------------')
    print('')

    await bot.send_message(admin_id, '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')

    # –ö–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    scheduler.add_job(notification, "interval", minutes=60)



# ````````````````````–°–¢–ê–†–¢```````````````````````````````````````


# –ï—Å–ª–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª, –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π:
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    scheduler.start()
    executor.start_polling(dp, on_startup=on_startup)