# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from PostgreSQLighter import SQLighter

from keyboard import adm_nenu_kb
from settings import *
from private_data import TOKEN_TG


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN_TG)
dp = Dispatcher(bot)
# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥
db = SQLighter('it_fest.db')

async def adm_menu(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —é–∑–µ—Ä –∞–¥–º–∏–Ω–æ–º
    if db.get_any(user_id, 'is_admin') == 0:
        await message.answer('–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º! \n –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–º —Å—Ç–∞—Ç—å, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @Momfj')
        return

    await bot.send_message(user_id, '–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', reply_markup=adm_nenu_kb)


async def adm_statistics(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —é–∑–µ—Ä –∞–¥–º–∏–Ω–æ–º
    if db.get_any(user_id, 'is_admin') == 0:
        await callback_query.answer('–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º! \n –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–º —Å—Ç–∞—Ç—å, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @Momfj')
        return

    num_of_users = len(db.get_all())
    num_of_events = len(db.get_all_from_events())
    admins = [user for user in db.get_all() if user[1] == 1]
    num_of_admins = len(admins)
    admins_id = [admin[0] for admin in admins]

    text = f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: \nüëΩ–ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {num_of_users}\nüéä–ß–∏—Å–ª–æ –∏–≤–µ–Ω—Ç–æ–≤: {num_of_events}\nü§°–ß–∏—Å–ª–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {num_of_admins}\nüÜî'—à–Ω–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(admins_id)}"

    await bot.send_message(user_id, text)